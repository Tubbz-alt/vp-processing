[
["index.html", "Process vertical profile data for visualizations Preface", " Process vertical profile data for visualizations Peter Desmet 2017-05-29 Preface This document describes how we process vertical profile (vp) data1 for the visualizations bird migration flow visualization and TIMAMP. You can also use it to just download or extract vp data for further analysis. Bird migration flow visualization for Sweden. We can specify min_height, max_height, both or none for a radar. If the value is something other than an integer, the general min_height or max_height is used instead. That means we donâ€™t need to filter the data on the general height range, as those will be applied for each radar already.â†© "],
["setup.html", "1 Get started 1.1 Install packages 1.2 Download code 1.3 Define processing settings 1.4 Run processing 1.5 Run your own processing 1.6 Update code 1.7 Update documentation", " 1 Get started This chapter explains how to get you up and running. It assumes you are working in RStudio. 1.1 Install packages First, you will need to install a number of R packages we will use: install.packages(c( &quot;devtools&quot;, # To install packages from GitHub &quot;yaml&quot;, # To read processing settings &quot;dplyr&quot;, # To process dataframes &quot;lubridate&quot;, # To process dates &quot;bookdown&quot; # To generate this documentation )) devtools::install_github(&quot;adokter/bioRad&quot;, ref=&quot;master&quot;) # To process vp data 1.2 Download code To run or adapt the code in this document, fork or clone this repository: https://github.com/enram/timamp-etl. 1.3 Define processing settings The processing requires a number of settings we need to define. If you want to run the processing with other data and settings, then this is the only code you need to update (in setup.Rmd): # The following three paths are relative to this script (i.e. to the src directory) raw_data_dir &lt;- &quot;../data/raw/example/&quot; # Needs a trailing slash! settings_file &lt;- &quot;../settings/example_settings.yaml&quot; radars_file &lt;- &quot;../settings/example_radars.csv&quot; 1.4 Run processing The processing of the vp data is done in four steps. Each has its own chapter and Rmd file: Get started (setup.Rmd) = this chapter Extract vp data (extract_vp.Rmd) Process vp data for the Bird migration flow visualization (vp_to_flowviz.Rmd) Process vp data for TIMAMP (vp_to_timamp.Rmd) The repository comes with example settings and data for all steps, so you can run the processing out of the box: Go the src directory of the downloaded code Open timamp-etl.Rproj in RStudio 1.4.1 Run all steps To run all steps use the build functionality: it will run all the .Rmd files in src and generate fancy documentation: Click on the Build pane in RStudio Click the Build book button Wait for the build to finish If you used example data, nothing should have changed: youâ€™ve just reprocessed those files. 1.4.2 Run individual steps If you are adapting the code, it can be useful to run individual steps. Except for setup.Rmd, all steps read input data file(s) and generate output data file(s). If those data files are already there, you donâ€™t need to rerun the step that generated those. However, all files use the processing settings defined in setup.Rmd, so you need to run that file at least once first: Open and run setup.Rmd in RStudio Open and run one of the other .Rmd files Adapt the .Rmd file and run to test 1.5 Run your own processing If you want to run the processing with your own data and processing settings, do this: 1.5.1 Upload your data Add a new directory to data/raw and give it a meaningful name Update raw_data_dir in 1.3 so the code can find your directory Copy your vp data to that directory or download vp data from the ENRAM bird profile data repository To download data, adapt the following to your needs and run it. You might want to get some â˜• as this could take a while: library(bioRad) bioRad::download_vp( start_date = &quot;2017-03-01&quot;, end_date = &quot;2017-03-01&quot;, country = c(&quot;se&quot;), radar = c(&quot;ang&quot;, &quot;arl&quot;), localpath = &quot;../data/raw/my_data&quot; ) 1.5.2 Update settings Copy and paste example_settings.yaml in settings and give it a meaningful name Update settings_file in 1.3 so the code can find your file Adapt your settings file to your own needs 1.5.3 Update radars metadata Copy and paste example_radars.csv in settings and give it a meaningful name Update radars_file in 1.3 so the code can find your file Adapt your settings file to your own needs Once done, run all steps of the processing. There should be no need to adapt the code. 1.6 Update code If the processing doesnâ€™t fit your needs, you can update the code by editing the relevant file in src and running it (see 1.4.2). If you encounter a bug in the original code, please let us know by filing an issue or submitting a pull request. 1.7 Update documentation What your are reading here (in your browser) is in fact all generated from the .Rmd files in the src directory, using the R package bookdown. If you notice a typo in this documentation, you can correct it by clicking the pencil icon in the menu at the top, which will take you straight to the correct .Rmd file in the original repository on GitHub. If you click the pencil icon on that GitHub page, you will be able to edit right away or create a copy (a fork) of the repository to do so, depending on your access rights. If you want to generate your own fancy documentation ðŸ“• from the adapted .Rmd files, then just run all steps. The build process will create your documentation in the docs repository. Open index.html in your browser to see it. For more info on debugging or hosting your documentation (i.e.Â on GitHub pages), see this bookdown book on bookdown. ðŸ˜Š "],
["extract-vp.html", "2 Extract vp data 2.1 Load settings 2.2 Select date range &amp; radars 2.3 Read vp files 2.4 Select variables 2.5 Select heights 2.6 Select specific dates per radar 2.7 Export to a CSV file", " 2 Extract vp data In this chapter weâ€™ll select, read, combine, filter and export data from vp files to a single, unaggregated CSV file. library(bioRad) library(dplyr) library(lubridate) source(&quot;functions/vp_to_df.R&quot;) source(&quot;functions/load_settings.R&quot;) 2.1 Load settings All of the filtering options weâ€™ll use here are defined in yaml settings file, which we pointed to in setup.Rmd (see 1.3). Letâ€™s load those: settings &lt;- load_settings(settings_file) 2.2 Select date range &amp; radars Select vp files on the date range and radars we defined in our settings (horizontal_selection): vp_file_paths &lt;- bioRad::retrieve_vp_paths( start_date = settings$general$start_date, end_date = settings$general$end_date, radar = settings$general$radar_ids_3char, path = raw_data_dir ) The file paths we get back only start from the data directory, so we need to append those with the path to the data directory itself: vp_file_paths &lt;- paste0(raw_data_dir, vp_file_paths) There are 32 vp files that meet our criteria. Preview: head(vp_file_paths, 5) ## [1] &quot;../data/raw/example/seang_vp_20161003T2000Z.h5&quot; ## [2] &quot;../data/raw/example/seang_vp_20161003T2015Z.h5&quot; ## [3] &quot;../data/raw/example/seang_vp_20161003T2030Z.h5&quot; ## [4] &quot;../data/raw/example/seang_vp_20161003T2045Z.h5&quot; ## [5] &quot;../data/raw/example/seang_vp_20161003T2100Z.h5&quot; 2.3 Read vp files We read all those files with bioRad. This could take a while (â˜• time): vp_files &lt;- bioRad::readvp.list(vp_file_paths) 2.4 Select variables A single vp file contains a data frame with heights as rows and variables as columns: str(vp_files[[1]]$data) ## &#39;data.frame&#39;: 25 obs. of 16 variables: ## $ ff : num NA 13.5 12.2 10.4 11.8 ... ## $ dbz : num NA 0.518 1.162 -2.417 -2.637 ... ## $ dens : num NA 35.6 41.3 18.1 17.2 ... ## $ u : num NA -9.63 -8.46 -6.58 -6.64 ... ## $ v : num NA -9.42 -8.75 -8.01 -9.76 ... ## $ gap : num 1 0 0 0 0 0 1 1 1 1 ... ## $ w : num NA 73.14 -2.75 -28.69 7.32 ... ## $ n_dbz : num 0 1177 3367 5710 3791 ... ## $ dd : num NA 226 224 219 214 ... ## $ n : num 0 213 1044 1421 940 ... ## $ DBZH : num NA 6.973 3.865 -0.865 -2.637 ... ## $ HGHT : num 0 200 400 600 800 1000 1200 1400 1600 1800 ... ## $ n_dbz_all: num 0 14686 12063 9070 3791 ... ## $ eta : num NA 391 454 199 189 ... ## $ sd_vvp : num NA 5.06 4.99 4.64 4.52 ... ## $ n_all : num 0 4971 3973 2520 940 ... We only select the variables (HGHT, u, v, dens, sd_vpp) and attributes (date_time and radar_id) we need (vertical selection). We retrieve those with the custom function vp_to_df.R after which we combine all data in one single data frame, sorted on radar_id, date_time, and HGHT: vp_data &lt;- list() for (i in seq_along(vp_files)) { vp_data[[i]] &lt;- vp_to_df(vp_files[[i]]) } dplyr::bind_rows(vp_data) %&gt;% dplyr::arrange(radar_id, date_time, HGHT) -&gt; vp_data That data frame contains 800 records. Preview: head(vp_data, 20) ## radar_id date_time HGHT u v dens ## 1 seang 2016-10-03 20:00:00 0 NA NA NA ## 2 seang 2016-10-03 20:00:00 200 -9.632832 -9.421702 35.59053 ## 3 seang 2016-10-03 20:00:00 400 -8.461532 -8.746634 41.27831 ## 4 seang 2016-10-03 20:00:00 600 -6.581830 -8.013961 18.10636 ## 5 seang 2016-10-03 20:00:00 800 -6.643213 -9.764238 17.21185 ## 6 seang 2016-10-03 20:00:00 1000 -6.028350 -10.171729 11.11173 ## 7 seang 2016-10-03 20:00:00 1200 NA NA NA ## 8 seang 2016-10-03 20:00:00 1400 NA NA NA ## 9 seang 2016-10-03 20:00:00 1600 NA NA NA ## 10 seang 2016-10-03 20:00:00 1800 NA NA NA ## 11 seang 2016-10-03 20:00:00 2000 NA NA NA ## 12 seang 2016-10-03 20:00:00 2200 NA NA NA ## 13 seang 2016-10-03 20:00:00 2400 NA NA NA ## 14 seang 2016-10-03 20:00:00 2600 NA NA NA ## 15 seang 2016-10-03 20:00:00 2800 NA NA NA ## 16 seang 2016-10-03 20:00:00 3000 NA NA NA ## 17 seang 2016-10-03 20:00:00 3200 NA NA NA ## 18 seang 2016-10-03 20:00:00 3400 NA NA NA ## 19 seang 2016-10-03 20:00:00 3600 NA NA NA ## 20 seang 2016-10-03 20:00:00 3800 NA NA NA ## sd_vvp ## 1 NA ## 2 5.061423 ## 3 4.992013 ## 4 4.636142 ## 5 4.517649 ## 6 4.500569 ## 7 NA ## 8 NA ## 9 NA ## 10 NA ## 11 NA ## 12 NA ## 13 NA ## 14 NA ## 15 NA ## 16 NA ## 17 NA ## 18 NA ## 19 NA ## 20 NA 2.5 Select heights Select the heights that fall within the height range we defined for each radar in our settings (horizontal_selection), with minimum and maximum inclusive. If no height settings are defined for a radar, the load_settings.R function will use our general height settings for that radar2: # Rather than using a complicated combination of AND and OR filters, we select # data radar by radar, and store the selected rows in separate data frames # (e.g. vp_data_temp$searl). We then combine and sort those back into a single # data frame, which we store again as vp_data. vp_data_temp &lt;- list() for (radar in settings$radars) { vp_data %&gt;% dplyr::filter( radar_id == radar$radar_id &amp; HGHT &gt;= radar$min_height &amp; HGHT &lt;= radar$max_height ) -&gt; vp_data_temp[[radar$radar_id]] } dplyr::bind_rows(vp_data_temp) %&gt;% # Sorting the data is not really necessary, but we just do it for good measure. dplyr::arrange(radar_id, date_time, HGHT) -&gt; vp_data Our data frame now contains 176 records. Preview: head(vp_data, 20) ## radar_id date_time HGHT u v dens ## 1 seang 2016-10-03 20:00:00 400 -8.461532 -8.746634 41.278313 ## 2 seang 2016-10-03 20:00:00 600 -6.581830 -8.013961 18.106361 ## 3 seang 2016-10-03 20:00:00 800 -6.643213 -9.764238 17.211851 ## 4 seang 2016-10-03 20:00:00 1000 -6.028350 -10.171729 11.111731 ## 5 seang 2016-10-03 20:00:00 1200 NA NA NA ## 6 seang 2016-10-03 20:15:00 400 -6.434723 -9.015049 24.130861 ## 7 seang 2016-10-03 20:15:00 600 -5.169861 -9.228568 15.996179 ## 8 seang 2016-10-03 20:15:00 800 -6.063486 -9.740829 12.144248 ## 9 seang 2016-10-03 20:15:00 1000 -6.542680 -10.478687 10.325830 ## 10 seang 2016-10-03 20:15:00 1200 NA NA NA ## 11 seang 2016-10-03 20:30:00 400 -6.797756 -7.848220 27.299721 ## 12 seang 2016-10-03 20:30:00 600 -5.817758 -8.979298 17.130468 ## 13 seang 2016-10-03 20:30:00 800 -5.468958 -8.262027 11.479380 ## 14 seang 2016-10-03 20:30:00 1000 -5.543563 -10.848226 7.716814 ## 15 seang 2016-10-03 20:30:00 1200 NA NA NA ## 16 seang 2016-10-03 20:45:00 400 -6.222421 -8.254267 25.177910 ## 17 seang 2016-10-03 20:45:00 600 -6.093638 -9.176083 16.627899 ## 18 seang 2016-10-03 20:45:00 800 -5.579547 -9.358899 13.490577 ## 19 seang 2016-10-03 20:45:00 1000 -5.917903 -8.756528 9.188003 ## 20 seang 2016-10-03 20:45:00 1200 NA NA NA ## sd_vvp ## 1 4.992013 ## 2 4.636142 ## 3 4.517649 ## 4 4.500569 ## 5 NA ## 6 4.949915 ## 7 4.918064 ## 8 4.568855 ## 9 4.599748 ## 10 NA ## 11 4.874985 ## 12 4.671036 ## 13 4.740903 ## 14 3.975209 ## 15 NA ## 16 4.734104 ## 17 4.525342 ## 18 4.470928 ## 19 4.934006 ## 20 NA 2.6 Select specific dates per radar â€¦ 2.7 Export to a CSV file Finally, we export the data to a CSV file3: write.csv(vp_data, file = &quot;../data/interim/vp_data.csv&quot;, na = &quot;&quot;, row.names = FALSE) We can specify min_height, max_height, both or none for a radar. If the value is something other than an integer, the general min_height or max_height is used instead. That means we donâ€™t need to filter the data on the general height range, as those will be applied for each radar already.â†© The data frame vp_data contains NaN and NA values, which have a different meaning. That difference gets lost in the CSV file: all are treated as blank (= NA) values, which is fine for visualizations. If you want to keep that difference, you need work further with vp_data._â†© "],
["vp-to-timamp.html", "3 Process vp data for TIMAMP", " 3 Process vp data for TIMAMP To be completedâ€¦ "]
]
