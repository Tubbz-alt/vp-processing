[
["index.html", "Vertical profile (vp) data processing for analyses and visualizations Preface", " Vertical profile (vp) data processing for analyses and visualizations Peter Desmet 2017-06-22 Preface This document describes how we process vertical profile (vp) data1 for further analysis and visualizations such as bird migration flow visualization and TIMAMP. First attempt at visualizing the Western flyway with the bird migration flow visualization. Vertical profiles of birds generated from weather radar volume scans by vol2bird.â†© "],
["setup.html", "1 Get started 1.1 Install packages 1.2 Download code 1.3 Define processing settings 1.4 Run processing 1.5 Run your own processing 1.6 Update code 1.7 Update documentation", " 1 Get started This chapter explains how to get you up and running. It assumes you are working in RStudio. 1.1 Install packages First, you will need to install a number of R packages we will use: install.packages(c( &quot;devtools&quot;, # To install packages from GitHub &quot;yaml&quot;, # To read processing settings &quot;dplyr&quot;, # To process dataframes &quot;loopr&quot;, # To process dataframes with loops &quot;lubridate&quot;, # To process dates &quot;bookdown&quot; # To generate this documentation )) devtools::install_github(&quot;enram/bioRad&quot;, ref=&quot;master&quot;) # To process vp data 1.2 Download code To run or adapt the code in this document, fork or clone this repository: https://github.com/enram/vp-processing. 1.3 Define processing settings The processing requires a number of settings we need to define. If you want to run the processing with other data and settings, then this is the only code you need to update (in setup.Rmd): # The following paths are relative to this script (i.e. to the src directory) # Where you store your raw data (needs a trailing slash) raw_data_dir &lt;- &quot;../data/raw/example/&quot; # Where it should write the processed data. processed_data_dir &lt;- &quot;../data/processed/example/&quot; # Make sure this folder exists! # Your processing settings (needs a trailing slash): settings_file &lt;- &quot;../settings/example_settings.yaml&quot; # The radar metadata (incl. coordinates): radars_metadata_file &lt;- &quot;../settings/radars.csv&quot; 1.4 Run processing The processing of the vp data is done in several steps. Each has its own chapter and Rmd file: Get started (setup.Rmd) = this chapter Extract vp data and process for further analyses (extract_vp.Rmd) Process vp data for the Bird migration flow visualization (vp_to_flowviz.Rmd) Process vp data for TIMAMP (vp_to_timamp.Rmd) Step 3 and 4 are currently not yet implemented. The repository comes with example settings and data for all steps, so you can run the processing out of the box: Go the src directory of the downloaded code Open vp-processing.Rproj in RStudio 1.4.1 Run all steps To run all steps use the build functionality: it will run all the .Rmd files in src and generate fancy documentation: Click on the Build pane in RStudio Click the Build book button Wait for the build to finish If you used example data, nothing should have changed: youâ€™ve just reprocessed those files. 1.4.2 Run individual steps If you are adapting the code, it can be useful to run individual steps. Except for setup.Rmd, all steps read input data file(s) and generate output data file(s). If those data files are already there, you donâ€™t need to rerun the step that generated those. However, all files use the processing settings defined in setup.Rmd, so you need to run that file at least once first: Open and run setup.Rmd in RStudio Open and run one of the other .Rmd files Adapt the .Rmd file and run to test 1.5 Run your own processing If you want to run the processing with your own data and processing settings, do this: 1.5.1 Upload your data Add a new directory to data/raw and give it a meaningful name Update raw_data_dir in 1.3 so the code can find your directory Copy your vp data to that directory or download vp data from the ENRAM bird profile data repository To download data, adapt the following to your needs and run it. You might want to get some â˜• as this could take a while: library(bioRad) bioRad::download_vp( start_date = &quot;2017-03-01&quot;, end_date = &quot;2017-03-01&quot;, country = c(&quot;se&quot;), radar = c(&quot;ang&quot;, &quot;arl&quot;), localpath = &quot;../data/raw/my_data&quot; ) 1.5.2 Update settings Copy and paste example_settings.yaml in settings and give it a meaningful name Update settings_file in 1.3 so the code can find your file Adapt your settings file to your own needs 1.5.3 Update radars metadata Copy and paste example_radars.csv in settings and give it a meaningful name Update radars_file in 1.3 so the code can find your file Adapt your settings file to your own needs Once done, run all steps of the processing. There should be no need to adapt the code. 1.6 Update code If the processing doesnâ€™t fit your needs, you can update the code by editing the relevant file in src and running it (see 1.4.2). If you encounter a bug in the original code, please let us know by filing an issue or submitting a pull request. 1.7 Update documentation What your are reading here (in your browser) is in fact all generated from the .Rmd files in the src directory, using the R package bookdown. If you notice a typo in this documentation, you can correct it by clicking the pencil icon in the menu at the top, which will take you straight to the correct .Rmd file in the original repository on GitHub. If you click the pencil icon on that GitHub page, you will be able to edit right away or create a copy (a fork) of the repository to do so, depending on your access rights. If you want to generate your own fancy documentation ðŸ“• from the adapted .Rmd files, then just run all steps. The build process will create your documentation in the docs repository. Open index.html in your browser to see it. For more info on debugging or hosting your documentation (i.e.Â on GitHub pages), see this bookdown book on bookdown. ðŸ˜Š "],
["extract-vp.html", "2 Extract vp data 2.1 Load settings 2.2 Select date range &amp; radars 2.3 Read vp files 2.4 Select variables 2.5 Calculate MTR per height 2.6 Add day/night information 2.7 Filter out heights 2.8 Filter out datetimes 2.9 Export to a CSV file", " 2 Extract vp data In this chapter weâ€™ll select, read, combine, filter and export data from vp files to a single, unaggregated CSV file. library(bioRad) library(dplyr) library(loopr) library(lubridate) source(&quot;functions/vp_to_df.R&quot;) source(&quot;functions/load_settings.R&quot;) 2.1 Load settings All of the filtering options weâ€™ll use here are defined in yaml settings file, which we pointed to in setup.Rmd (see 1.3). Letâ€™s load those: settings &lt;- load_settings(settings_file, radars_metadata_file) Found 3 radars from 1 countries in the settings. 2.2 Select date range &amp; radars Select vp files on the date range and radars we defined in our settings (file selection): vp_file_paths &lt;- bioRad::retrieve_vp_paths( start_date = settings$general$start_date, end_date = settings$general$end_date, radar = settings$general$radar_ids_3char, path = raw_data_dir ) The file paths we get back only start from the data directory, so we need to append those with the path to the data directory itself: vp_file_paths &lt;- paste0(raw_data_dir, vp_file_paths) There are 48 vp files that meet our criteria. Preview: head(vp_file_paths, 5) ## [1] &quot;../data/raw/example/seang_vp_20161003T2000Z.h5&quot; ## [2] &quot;../data/raw/example/seang_vp_20161003T2015Z.h5&quot; ## [3] &quot;../data/raw/example/seang_vp_20161003T2030Z.h5&quot; ## [4] &quot;../data/raw/example/seang_vp_20161003T2045Z.h5&quot; ## [5] &quot;../data/raw/example/seang_vp_20161003T2100Z.h5&quot; 2.3 Read vp files We read all those files with bioRad. This could take a while (â˜• or ðŸ›Œ time): vp_files &lt;- bioRad::readvp.list(vp_file_paths) 2.4 Select variables A single vp file contains a data frame with heights as rows and variables as columns: str(vp_files[[1]]$data) ## &#39;data.frame&#39;: 25 obs. of 16 variables: ## $ ff : num NA 13.5 12.2 10.4 11.8 ... ## $ dbz : num NA 0.518 1.162 -2.417 -2.637 ... ## $ dens : num NA 35.6 41.3 18.1 17.2 ... ## $ u : num NA -9.63 -8.46 -6.58 -6.64 ... ## $ v : num NA -9.42 -8.75 -8.01 -9.76 ... ## $ gap : num 1 0 0 0 0 0 1 1 1 1 ... ## $ w : num NA 73.14 -2.75 -28.69 7.32 ... ## $ n_dbz : num 0 1177 3367 5710 3791 ... ## $ dd : num NA 226 224 219 214 ... ## $ n : num 0 213 1044 1421 940 ... ## $ DBZH : num NA 6.973 3.865 -0.865 -2.637 ... ## $ HGHT : num 0 200 400 600 800 1000 1200 1400 1600 1800 ... ## $ n_dbz_all: num 0 14686 12063 9070 3791 ... ## $ eta : num NA 391 454 199 189 ... ## $ sd_vvp : num NA 5.06 4.99 4.64 4.52 ... ## $ n_all : num 0 4971 3973 2520 940 ... We only need a couple of variables (HGHT, u, v, dens, dd, ff) and attributes (date_time and radar_id) from the vp_files (column selection). We retrieve those with the custom function vp_to_df() after which we combine all data in one single data frame, sorted on radar_id, date_time, and HGHT: vp_data &lt;- list() variables = c(&quot;u&quot;, &quot;v&quot;, &quot;dens&quot;, &quot;dd&quot;, &quot;ff&quot;) # HGHT is added by default in vp_to_df() for (i in seq_along(vp_files)) { vp_data[[i]] &lt;- vp_to_df(vp_files[[i]], variables) } dplyr::bind_rows(vp_data) %&gt;% dplyr::arrange(radar_id, datetime, HGHT) -&gt; vp_data To uniquely reference records later, we add an id column: vp_data &lt;- cbind(&quot;id&quot; = seq.int(nrow(vp_data)), vp_data) That data frame contains 1200 records. 2.5 Calculate MTR per height We also want migration traffic rate (mtr) per height for further analysis, so we calculate and add it as an extra column: vp_data$mtr &lt;- vp_data$ff * vp_data$dens / 5 # Add our new mtr to variables variables &lt;- c(variables, &quot;mtr&quot;) Preview head(vp_data, 20) ## id radar_id datetime HGHT u v dens ## 1 1 seang 2016-10-03 20:00:00 0 NA NA NA ## 2 2 seang 2016-10-03 20:00:00 200 -9.632832 -9.421702 35.59053 ## 3 3 seang 2016-10-03 20:00:00 400 -8.461532 -8.746634 41.27831 ## 4 4 seang 2016-10-03 20:00:00 600 -6.581830 -8.013961 18.10636 ## 5 5 seang 2016-10-03 20:00:00 800 -6.643213 -9.764238 17.21185 ## 6 6 seang 2016-10-03 20:00:00 1000 -6.028350 -10.171729 11.11173 ## 7 7 seang 2016-10-03 20:00:00 1200 NA NA NA ## 8 8 seang 2016-10-03 20:00:00 1400 NA NA NA ## 9 9 seang 2016-10-03 20:00:00 1600 NA NA NA ## 10 10 seang 2016-10-03 20:00:00 1800 NA NA NA ## 11 11 seang 2016-10-03 20:00:00 2000 NA NA NA ## 12 12 seang 2016-10-03 20:00:00 2200 NA NA NA ## 13 13 seang 2016-10-03 20:00:00 2400 NA NA NA ## 14 14 seang 2016-10-03 20:00:00 2600 NA NA NA ## 15 15 seang 2016-10-03 20:00:00 2800 NA NA NA ## 16 16 seang 2016-10-03 20:00:00 3000 NA NA NA ## 17 17 seang 2016-10-03 20:00:00 3200 NA NA NA ## 18 18 seang 2016-10-03 20:00:00 3400 NA NA NA ## 19 19 seang 2016-10-03 20:00:00 3600 NA NA NA ## 20 20 seang 2016-10-03 20:00:00 3800 NA NA NA ## dd ff mtr ## 1 NA NA NA ## 2 225.6348 13.47442 95.91232 ## 3 224.0508 12.16968 100.46878 ## 4 219.3961 10.37035 37.55384 ## 5 214.2299 11.80985 40.65388 ## 6 210.6534 11.82392 26.27684 ## 7 NA NA NA ## 8 NA NA NA ## 9 NA NA NA ## 10 NA NA NA ## 11 NA NA NA ## 12 NA NA NA ## 13 NA NA NA ## 14 NA NA NA ## 15 NA NA NA ## 16 NA NA NA ## 17 NA NA NA ## 18 NA NA NA ## 19 NA NA NA ## 20 NA NA NA 2.6 Add day/night information To add day/night information, we first create a sunrise/sunset dataframe for each radar/date combination, using the latitude/longitude from our radar metadata and the suntime() function in bioRad: # Create a simple dataframe from the settings with radar, latitude, longitude bind_rows(lapply(settings$radars, data.frame)) %&gt;% select(radar_id, latitude, longitude) -&gt; radars_lat_long # Group vp_data by radar and date vp_data %&gt;% mutate(date = as.Date(datetime)) %&gt;% group_by(radar_id, date) %&gt;% summarize() %&gt;% # Join with radar_lat_long to get the latitude and longitude column left_join(radars_lat_long, by = &quot;radar_id&quot;) %&gt;% # Use bioRad to add sunrise/sunset information mutate(sunrise = bioRad::suntime(date = date, lat = latitude, lon = longitude, rise = TRUE)) %&gt;% mutate(sunset = bioRad::suntime(date = date, lat = latitude, lon = longitude, rise = FALSE)) -&gt; radars_dates_sunriset # Preview head(radars_dates_sunriset, 5) ## # A tibble: 3 x 6 ## # Groups: radar_id [3] ## radar_id date latitude longitude sunrise ## &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dttm&gt; ## 1 seang 2016-10-03 56.3675 12.8517 2016-10-03 05:21:06 ## 2 searl 2016-10-03 59.6544 17.9463 2016-10-03 05:04:02 ## 3 sease 2016-10-03 57.3035 18.4001 2016-10-03 04:59:47 ## # ... with 1 more variables: sunset &lt;dttm&gt; We then combine this sunrise/sunset information back with our vp data, to figure out if it is day or night and to which date they belong (date_of_sunset). For the latter, we consider night timestamps between midnight and sunrise as belonging to the previous date: vp_data %&gt;% # A date (not datetime) column to match with radars_sunriset mutate(date = as.Date(datetime)) %&gt;% # Combine vp data with radar_sunriset information right_join(radars_dates_sunriset, by = c(&quot;radar_id&quot; = &quot;radar_id&quot;, &quot;date&quot; = &quot;date&quot;)) %&gt;% # Define nights as starting before sunrise and after sunset mutate(day_night = if_else( datetime &lt; sunrise | datetime &gt; sunset, &quot;night&quot;, &quot;day&quot; )) %&gt;% # Calculate the date of sunrise: # For days: keep the date of the datetime # For nights: rewind the time with 12 hours, so that night timestamps between # midnight and sunrise are considered belonging to previous day. mutate(date_of_sunset = if_else( day_night == &quot;night&quot;, datetime - hours(12), datetime )) %&gt;% mutate(date_of_sunset = format(date_of_sunset, format = &quot;%Y%m%d&quot;)) %&gt;% # Remove unneeded columns select(-date, -latitude, -longitude, -sunrise, -sunset) -&gt; vp_data Preview: head(vp_data, 20) ## id radar_id datetime HGHT u v dens ## 1 1 seang 2016-10-03 20:00:00 0 NA NA NA ## 2 2 seang 2016-10-03 20:00:00 200 -9.632832 -9.421702 35.59053 ## 3 3 seang 2016-10-03 20:00:00 400 -8.461532 -8.746634 41.27831 ## 4 4 seang 2016-10-03 20:00:00 600 -6.581830 -8.013961 18.10636 ## 5 5 seang 2016-10-03 20:00:00 800 -6.643213 -9.764238 17.21185 ## 6 6 seang 2016-10-03 20:00:00 1000 -6.028350 -10.171729 11.11173 ## 7 7 seang 2016-10-03 20:00:00 1200 NA NA NA ## 8 8 seang 2016-10-03 20:00:00 1400 NA NA NA ## 9 9 seang 2016-10-03 20:00:00 1600 NA NA NA ## 10 10 seang 2016-10-03 20:00:00 1800 NA NA NA ## 11 11 seang 2016-10-03 20:00:00 2000 NA NA NA ## 12 12 seang 2016-10-03 20:00:00 2200 NA NA NA ## 13 13 seang 2016-10-03 20:00:00 2400 NA NA NA ## 14 14 seang 2016-10-03 20:00:00 2600 NA NA NA ## 15 15 seang 2016-10-03 20:00:00 2800 NA NA NA ## 16 16 seang 2016-10-03 20:00:00 3000 NA NA NA ## 17 17 seang 2016-10-03 20:00:00 3200 NA NA NA ## 18 18 seang 2016-10-03 20:00:00 3400 NA NA NA ## 19 19 seang 2016-10-03 20:00:00 3600 NA NA NA ## 20 20 seang 2016-10-03 20:00:00 3800 NA NA NA ## dd ff mtr day_night date_of_sunset ## 1 NA NA NA night 20161003 ## 2 225.6348 13.47442 95.91232 night 20161003 ## 3 224.0508 12.16968 100.46878 night 20161003 ## 4 219.3961 10.37035 37.55384 night 20161003 ## 5 214.2299 11.80985 40.65388 night 20161003 ## 6 210.6534 11.82392 26.27684 night 20161003 ## 7 NA NA NA night 20161003 ## 8 NA NA NA night 20161003 ## 9 NA NA NA night 20161003 ## 10 NA NA NA night 20161003 ## 11 NA NA NA night 20161003 ## 12 NA NA NA night 20161003 ## 13 NA NA NA night 20161003 ## 14 NA NA NA night 20161003 ## 15 NA NA NA night 20161003 ## 16 NA NA NA night 20161003 ## 17 NA NA NA night 20161003 ## 18 NA NA NA night 20161003 ## 19 NA NA NA night 20161003 ## 20 NA NA NA night 20161003 2.7 Filter out heights For each radar we only want to select the data above 200m above ground level (AGL) (row selection). Since the heights in the data are expressed in above sea level (ASL), the height range to exclude is the altitude of the radar + 100m, which differs from radar to radar. Those height ranges are defined in our settings (see 1.3). To do this, we take the include_heights range for each radar2 and set the data outside that range to NA. for (radar in settings$radars) { # For each radar # Create height subset for that radar subset = vp_data %&gt;% filter( radar_id == radar$radar_id &amp; # Specific radar (HGHT &lt; radar$min_height | # Below min heignt HGHT &gt; radar$max_height) # Above max height ) %&gt;% # Set variables to NA mutate(u = NA, v = NA, dens = NA, dd = NA, ff = NA, mtr = NA) %&gt;% # Mention that the row was excluded because of height mutate(exclusion_reason = &quot;height&quot;) # Insert subset back into vp_data insert(vp_data, subset, by = &quot;id&quot;) -&gt; vp_data } Preview: head(vp_data, 20) ## id radar_id datetime HGHT u v dens ## 1 1 seang 2016-10-03 20:00:00 0 NA NA NA ## 2 2 seang 2016-10-03 20:00:00 200 NA NA NA ## 3 3 seang 2016-10-03 20:00:00 400 -8.461532 -8.746634 41.27831 ## 4 4 seang 2016-10-03 20:00:00 600 -6.581830 -8.013961 18.10636 ## 5 5 seang 2016-10-03 20:00:00 800 -6.643213 -9.764238 17.21185 ## 6 6 seang 2016-10-03 20:00:00 1000 -6.028350 -10.171729 11.11173 ## 7 7 seang 2016-10-03 20:00:00 1200 NA NA NA ## 8 8 seang 2016-10-03 20:00:00 1400 NA NA NA ## 9 9 seang 2016-10-03 20:00:00 1600 NA NA NA ## 10 10 seang 2016-10-03 20:00:00 1800 NA NA NA ## 11 11 seang 2016-10-03 20:00:00 2000 NA NA NA ## 12 12 seang 2016-10-03 20:00:00 2200 NA NA NA ## 13 13 seang 2016-10-03 20:00:00 2400 NA NA NA ## 14 14 seang 2016-10-03 20:00:00 2600 NA NA NA ## 15 15 seang 2016-10-03 20:00:00 2800 NA NA NA ## 16 16 seang 2016-10-03 20:00:00 3000 NA NA NA ## 17 17 seang 2016-10-03 20:00:00 3200 NA NA NA ## 18 18 seang 2016-10-03 20:00:00 3400 NA NA NA ## 19 19 seang 2016-10-03 20:00:00 3600 NA NA NA ## 20 20 seang 2016-10-03 20:00:00 3800 NA NA NA ## dd ff mtr day_night date_of_sunset exclusion_reason ## 1 NA NA NA night 20161003 height ## 2 NA NA NA night 20161003 height ## 3 224.0508 12.16968 100.46878 night 20161003 &lt;NA&gt; ## 4 219.3961 10.37035 37.55384 night 20161003 &lt;NA&gt; ## 5 214.2299 11.80985 40.65388 night 20161003 &lt;NA&gt; ## 6 210.6534 11.82392 26.27684 night 20161003 &lt;NA&gt; ## 7 NA NA NA night 20161003 &lt;NA&gt; ## 8 NA NA NA night 20161003 &lt;NA&gt; ## 9 NA NA NA night 20161003 &lt;NA&gt; ## 10 NA NA NA night 20161003 &lt;NA&gt; ## 11 NA NA NA night 20161003 &lt;NA&gt; ## 12 NA NA NA night 20161003 height ## 13 NA NA NA night 20161003 height ## 14 NA NA NA night 20161003 height ## 15 NA NA NA night 20161003 height ## 16 NA NA NA night 20161003 height ## 17 NA NA NA night 20161003 height ## 18 NA NA NA night 20161003 height ## 19 NA NA NA night 20161003 height ## 20 NA NA NA night 20161003 height 2.8 Filter out datetimes For some radars certain datetime ranges need to be excluded due to (remaining) rain clutter (row selection). Those datetime ranges were discovered during manual inspection and are defined in our settings (see 1.3)._ To do this, we take the exclude_datetimes range for each radar and set the data inside that range to NA. vp_data_temp &lt;- vp_data for (radar in settings$radars) { # For each radar for (i in seq_along(radar$exclude_datetime_from)) { # For each exclude_datetime # Create datetime subset for that radar subset = vp_data_temp %&gt;% filter( radar_id == radar$radar_id &amp; # Specific radar between( datetime, radar$exclude_datetime_from[[i]], # From this datetime radar$exclude_datetime_to[[i]] # Until this datetime ) ) %&gt;% # Set variables to NA mutate(u = NA, v = NA, dens = NA, dd = NA, ff = NA, mtr = NA) %&gt;% # Mention that the row was excluded because of datetime # This will overwrite any previous &quot;height&quot; reason mutate(exclusion_reason = &quot;datetime&quot;) # Insert subset back into vp_data insert(vp_data, subset, by = &quot;id&quot;) -&gt; vp_data } } Preview: head(vp_data, 20) ## id radar_id datetime HGHT u v dens dd ff mtr day_night ## 1 1 seang 2016-10-03 20:00:00 0 NA NA NA NA NA NA night ## 2 2 seang 2016-10-03 20:00:00 200 NA NA NA NA NA NA night ## 3 3 seang 2016-10-03 20:00:00 400 NA NA NA NA NA NA night ## 4 4 seang 2016-10-03 20:00:00 600 NA NA NA NA NA NA night ## 5 5 seang 2016-10-03 20:00:00 800 NA NA NA NA NA NA night ## 6 6 seang 2016-10-03 20:00:00 1000 NA NA NA NA NA NA night ## 7 7 seang 2016-10-03 20:00:00 1200 NA NA NA NA NA NA night ## 8 8 seang 2016-10-03 20:00:00 1400 NA NA NA NA NA NA night ## 9 9 seang 2016-10-03 20:00:00 1600 NA NA NA NA NA NA night ## 10 10 seang 2016-10-03 20:00:00 1800 NA NA NA NA NA NA night ## 11 11 seang 2016-10-03 20:00:00 2000 NA NA NA NA NA NA night ## 12 12 seang 2016-10-03 20:00:00 2200 NA NA NA NA NA NA night ## 13 13 seang 2016-10-03 20:00:00 2400 NA NA NA NA NA NA night ## 14 14 seang 2016-10-03 20:00:00 2600 NA NA NA NA NA NA night ## 15 15 seang 2016-10-03 20:00:00 2800 NA NA NA NA NA NA night ## 16 16 seang 2016-10-03 20:00:00 3000 NA NA NA NA NA NA night ## 17 17 seang 2016-10-03 20:00:00 3200 NA NA NA NA NA NA night ## 18 18 seang 2016-10-03 20:00:00 3400 NA NA NA NA NA NA night ## 19 19 seang 2016-10-03 20:00:00 3600 NA NA NA NA NA NA night ## 20 20 seang 2016-10-03 20:00:00 3800 NA NA NA NA NA NA night ## date_of_sunset exclusion_reason ## 1 20161003 datetime ## 2 20161003 datetime ## 3 20161003 datetime ## 4 20161003 datetime ## 5 20161003 datetime ## 6 20161003 datetime ## 7 20161003 datetime ## 8 20161003 datetime ## 9 20161003 datetime ## 10 20161003 datetime ## 11 20161003 datetime ## 12 20161003 datetime ## 13 20161003 datetime ## 14 20161003 datetime ## 15 20161003 datetime ## 16 20161003 datetime ## 17 20161003 datetime ## 18 20161003 datetime ## 19 20161003 datetime ## 20 20161003 datetime 2.9 Export to a CSV file Finally, we export the data to a CSV file3: # Remove id column vp_data %&gt;% select(-id) -&gt; vp_data # Write data to file (filename is dynamically created by load_settings) write.csv(vp_data, file = paste0(processed_data_dir, settings$general$vp_output_file), na = &quot;&quot;, row.names = FALSE) For a radar the include_heights range can contain a min_height, max_height, both or none for a radar. If the value is something other than an integer, the general min_height or max_height is used instead.â†© The data frame vp_data contains NaN and NA values, which have a different meaning. That difference gets lost in the CSV file: all are treated as blank (= NA) values, which is fine for visualizations. If you want to keep that difference, you need work further with vp_data.â†© "]
]
