[
["index.html", "Vertical profile (vp) data processing for analyses and visualizations Preface", " Vertical profile (vp) data processing for analyses and visualizations Peter Desmet 2017-10-05 Preface This document describes how we process vertical profile (vp) data1 for further analysis and visualizations such as bird migration flow visualization and TIMAMP. First attempt at visualizing the Western flyway with the bird migration flow visualization. Vertical profiles of birds generated from weather radar volume scans by vol2bird.â†© "],
["setup.html", "1 Get started 1.1 Install packages 1.2 Download code 1.3 Define processing settings 1.4 Run processing 1.5 Run your own processing 1.6 Update code 1.7 Update documentation", " 1 Get started This chapter explains how to get you up and running. It assumes you are working in RStudio. 1.1 Install packages First, you will need to install a number of R packages we will use: install.packages(c( &quot;devtools&quot;, # To install packages from GitHub &quot;yaml&quot;, # To read processing settings &quot;dplyr&quot;, # To process dataframes &quot;loopr&quot;, # To process dataframes with loops &quot;lubridate&quot;, # To process dates &quot;circular&quot;, # To calculate circular means &quot;bookdown&quot; # To generate this documentation )) devtools::install_github(&quot;adokter/bioRad&quot;, ref=&quot;master&quot;) # To process vp data 1.2 Download code To run or adapt the code in this document, fork or clone this repository: https://github.com/enram/vp-processing. 1.3 Define processing settings The processing requires a number of settings we need to define. If you want to run the processing with other data and settings, then this is the only code you need to update (in setup.Rmd): # Project name project_name &lt;- &quot;flyway&quot; # Paths # The paths below use the project_name and are relative to this script # (i.e. to the src directory). Make sure all directories exist! # Where you store your raw data (needs a trailing slash) raw_data_dir &lt;- paste0(&quot;../data/raw/&quot;, project_name, &quot;/&quot;) # Where it processed vp data should go (needs a trailing slash) processed_data_dir &lt;- paste0(&quot;../data/processed/&quot;, project_name, &quot;/&quot;) # Where it processed flowviz data should go (needs a trailing slash) flowviz_data_dir &lt;- paste0(&quot;../data/flowviz/&quot;, project_name, &quot;/&quot;) # Your processing settings: settings_file &lt;- paste0(&quot;../settings/&quot;, project_name, &quot;_settings.yaml&quot;) # The radar metadata (incl. coordinates): radars_metadata_file &lt;- &quot;../settings/radars.csv&quot; 1.4 Run processing The processing of the vp data is done in several steps. Each has its own chapter and Rmd file: Get started (setup.Rmd) = this chapter Extract vp data and process for further analyses (extract_vp.Rmd) Process vp data for the Bird migration flow visualization (vp_to_flowviz.Rmd) Process vp data for TIMAMP (vp_to_timamp.Rmd) Step 3 and 4 are currently not yet implemented. The repository comes with example settings and data for all steps, so you can run the processing out of the box: Go the src directory of the downloaded code Open vp-processing.Rproj in RStudio 1.4.1 Run all steps To run all steps use the build functionality: it will run all the .Rmd files in src and generate fancy documentation: Click on the Build pane in RStudio Click the Build book button Wait for the build to finish If you used example data, nothing should have changed: youâ€™ve just reprocessed those files. 1.4.2 Run individual steps If you are adapting the code, it can be useful to run individual steps. Except for setup.Rmd, all steps read input data file(s) and generate output data file(s). If those data files are already there, you donâ€™t need to rerun the step that generated those. However, all files use the processing settings defined in setup.Rmd, so you need to run that file at least once first: Open and run setup.Rmd in RStudio Open and run one of the other .Rmd files Adapt the .Rmd file and run to test 1.5 Run your own processing If you want to run the processing with your own data and processing settings, do this: 1.5.1 Upload your data Add a new directory to data/raw and give it a meaningful name Update raw_data_dir in 1.3 so the code can find your directory Copy your vp data to that directory or download vp data from the ENRAM bird profile data repository To download data, adapt the following to your needs and run it. You might want to get some â˜• as this could take a while: library(bioRad) bioRad::download_vp( start_date = &quot;2017-03-01&quot;, end_date = &quot;2017-03-01&quot;, country = c(&quot;se&quot;), radar = c(&quot;ang&quot;, &quot;arl&quot;), localpath = &quot;../data/raw/my_data&quot; ) 1.5.2 Update settings Copy and paste example_settings.yaml in settings and give it a meaningful name Update settings_file in 1.3 so the code can find your file Adapt your settings file to your own needs 1.5.3 Update radars metadata Copy and paste example_radars.csv in settings and give it a meaningful name Update radars_file in 1.3 so the code can find your file Adapt your settings file to your own needs Once done, run all steps of the processing. There should be no need to adapt the code. 1.6 Update code If the processing doesnâ€™t fit your needs, you can update the code by editing the relevant file in src and running it (see 1.4.2). If you encounter a bug in the original code, please let us know by filing an issue or submitting a pull request. 1.7 Update documentation What your are reading here (in your browser) is in fact all generated from the .Rmd files in the src directory, using the R package bookdown. If you notice a typo in this documentation, you can correct it by clicking the pencil icon in the menu at the top, which will take you straight to the correct .Rmd file in the original repository on GitHub. If you click the pencil icon on that GitHub page, you will be able to edit right away or create a copy (a fork) of the repository to do so, depending on your access rights. If you want to generate your own fancy documentation ðŸ“• from the adapted .Rmd files, then just run all steps. The build process will create your documentation in the docs repository. Open index.html in your browser to see it. For more info on debugging or hosting your documentation (i.e. on GitHub pages), see this bookdown book on bookdown. ðŸ˜Š "],
["extract-vp.html", "2 Extract vp data 2.1 Load settings 2.2 Select date range &amp; radars 2.3 Read vp files 2.4 Select variables 2.5 Calculate MTR per height 2.6 Add day/night information 2.7 Filter out heights 2.8 Filter out datetimes 2.9 Export to a CSV file", " 2 Extract vp data In this chapter weâ€™ll select, read, combine, filter and export data from vp files to a single, unaggregated CSV file. library(bioRad) library(dplyr) library(loopr) library(lubridate) source(&quot;functions/vp_to_df.R&quot;) source(&quot;functions/load_settings.R&quot;) 2.1 Load settings All of the filtering options weâ€™ll use here are defined in yaml settings file, which we pointed to in setup.Rmd (see 1.3). Letâ€™s load those: settings &lt;- load_settings(settings_file, radars_metadata_file) Found 64 radars from 9 countries in the settings. 2.2 Select date range &amp; radars Select vp files on the date range and radars we defined in our settings (file selection): vp_file_paths &lt;- bioRad::retrieve_vp_paths( start_date = settings$general$start_date, end_date = settings$general$end_date, radar = settings$general$radar_ids_3char, path = raw_data_dir ) The file paths we get back only start from the data directory, so we need to append those with the path to the data directory itself: vp_file_paths &lt;- paste0(raw_data_dir, vp_file_paths) There are 6629 vp files that meet our criteria. Preview: head(vp_file_paths, 5) ## [1] &quot;../data/raw/flyway/data_vp_be_v0.3.16/2016/09/19/bejab_vp_201609190000.h5&quot; ## [2] &quot;../data/raw/flyway/data_vp_be_v0.3.16/2016/09/19/bejab_vp_201609190005.h5&quot; ## [3] &quot;../data/raw/flyway/data_vp_be_v0.3.16/2016/09/19/bejab_vp_201609190010.h5&quot; ## [4] &quot;../data/raw/flyway/data_vp_be_v0.3.16/2016/09/19/bejab_vp_201609190015.h5&quot; ## [5] &quot;../data/raw/flyway/data_vp_be_v0.3.16/2016/09/19/bejab_vp_201609190020.h5&quot; 2.3 Read vp files We read all those files with bioRad. This could take a while (â˜• or ðŸ›Œ time): vp_files &lt;- bioRad::readvp.list(vp_file_paths) 2.4 Select variables A single vp file contains a data frame with heights as rows and variables as columns: str(vp_files[[1]]$data) ## &#39;data.frame&#39;: 25 obs. of 16 variables: ## $ ff : num 5.91 8.98 8.83 6.68 6.4 ... ## $ dbz : num -0.836 -2.043 -5.189 -7.28 -8.85 ... ## $ dens : num 26.37 19.97 9.68 5.98 4.17 ... ## $ u : num -2.93 -5.97 -5.89 -3.17 -2.32 ... ## $ v : num -5.13 -6.7 -6.57 -5.88 -5.97 ... ## $ gap : num 0 0 0 0 0 0 0 0 0 0 ... ## $ w : num -25.45 -22.78 6.58 7.36 8.08 ... ## $ n_dbz : num 879 8817 10404 7416 8068 ... ## $ dd : num 210 222 222 208 201 ... ## $ n : num 794 6624 6376 3962 3899 ... ## $ DBZH : num 26.84 22.22 -1.51 -6.74 -8.76 ... ## $ HGHT : num 0 200 400 600 800 1000 1200 1400 1600 1800 ... ## $ n_dbz_all: num 5061 14055 12069 7703 8447 ... ## $ eta : num 290 219.6 106.4 65.8 45.8 ... ## $ sd_vvp : num 3.59 3.9 3.99 3.45 3.2 ... ## $ n_all : num 4365 10497 7439 4210 3949 ... We only need a couple of variables (HGHT, u, v, dens, dd, ff) and attributes (date_time and radar_id) from the vp_files (column selection). We retrieve those with the custom function vp_to_df() after which we combine all data in one single data frame, sorted on radar_id, date_time, and HGHT: vp_data &lt;- list() variables = c(&quot;u&quot;, &quot;v&quot;, &quot;dens&quot;, &quot;dd&quot;, &quot;ff&quot;) # HGHT is added by default in vp_to_df() for (i in seq_along(vp_files)) { vp_data[[i]] &lt;- vp_to_df(vp_files[[i]], variables) } bind_rows(vp_data) %&gt;% arrange(radar_id, datetime, HGHT) -&gt; vp_data To uniquely reference records later, we add an id column: vp_data &lt;- cbind(&quot;id&quot; = seq.int(nrow(vp_data)), vp_data) That data frame contains 140960 records. 2.5 Calculate MTR per height We also want migration traffic rate (mtr) per height for further analysis, so we calculate and add it as an extra column: # Calculate mtr: times 3.6 to convert ff from m/s to km/h, divide by 5 because 200m bins vp_data$mtr &lt;- vp_data$ff * 3.6 * vp_data$dens / 5 # Add our new mtr to variables variables &lt;- c(variables, &quot;mtr&quot;) Preview head(vp_data, 20) ## id radar_id datetime HGHT u v dens dd ## 1 1 bejab 2016-09-19 0 -2.9332356 -5.1274614 26.3651314 209.77231 ## 2 2 bejab 2016-09-19 200 -5.9695516 -6.7025647 19.9679146 221.68944 ## 3 3 bejab 2016-09-19 400 -5.8944726 -6.5680308 9.6763630 221.90636 ## 4 4 bejab 2016-09-19 600 -3.1691368 -5.8770409 5.9785151 208.33533 ## 5 5 bejab 2016-09-19 800 -2.3166976 -5.9704909 4.1655445 201.20747 ## 6 6 bejab 2016-09-19 1000 -1.0189155 -3.9789803 2.5513470 194.36334 ## 7 7 bejab 2016-09-19 1200 -0.2915183 -2.7959254 1.1012880 185.95245 ## 8 8 bejab 2016-09-19 1400 0.9222706 -2.8132153 1.1282989 161.84904 ## 9 9 bejab 2016-09-19 1600 1.4770844 -0.2543128 0.2693528 99.76896 ## 10 10 bejab 2016-09-19 1800 0.5449337 -0.8506422 2.0088153 147.35579 ## 11 11 bejab 2016-09-19 2000 -0.3131877 -0.2932509 0.3424582 226.88293 ## 12 12 bejab 2016-09-19 2200 0.9098089 0.3120916 0.2928373 71.06651 ## 13 13 bejab 2016-09-19 2400 NaN NaN 0.0000000 NaN ## 14 14 bejab 2016-09-19 2600 NaN NaN 0.0000000 NaN ## 15 15 bejab 2016-09-19 2800 NaN NaN 0.0000000 NaN ## 16 16 bejab 2016-09-19 3000 NaN NaN 0.0000000 NaN ## 17 17 bejab 2016-09-19 3200 NaN NaN 0.0000000 NaN ## 18 18 bejab 2016-09-19 3400 NaN NaN 0.0000000 NaN ## 19 19 bejab 2016-09-19 3600 NaN NaN 0.0000000 NaN ## 20 20 bejab 2016-09-19 3800 NaN NaN 0.0000000 NaN ## ff mtr ## 1 5.9071765 112.1353087 ## 2 8.9755182 129.0401145 ## 3 8.8251820 61.4848782 ## 4 6.6770530 28.7415809 ## 5 6.4042058 19.2074431 ## 6 4.1073680 7.5451112 ## 7 2.8110819 2.2289837 ## 8 2.9605343 2.4050647 ## 9 1.4988173 0.2906717 ## 10 1.0102202 1.4611289 ## 11 0.4290484 0.1057904 ## 12 0.9618490 0.2027990 ## 13 NaN NaN ## 14 NaN NaN ## 15 NaN NaN ## 16 NaN NaN ## 17 NaN NaN ## 18 NaN NaN ## 19 NaN NaN ## 20 NaN NaN 2.6 Add day/night information To add day/night information, we first create a sunrise/sunset dataframe for each radar/date combination, using the latitude/longitude from our radar metadata and the suntime() function in bioRad: # Create a simple dataframe from the settings with radar, latitude, longitude bind_rows(lapply(settings$radars, data.frame)) %&gt;% select(radar_id, latitude, longitude) -&gt; radars_lat_long # Group vp_data by radar and date vp_data %&gt;% mutate(date = as.Date(datetime)) %&gt;% group_by(radar_id, date) %&gt;% summarize() %&gt;% # Join with radar_lat_long to get the latitude and longitude column left_join(radars_lat_long, by = &quot;radar_id&quot;) %&gt;% # Use bioRad to add sunrise/sunset information mutate(sunrise = bioRad::suntime(date = date, lat = latitude, lon = longitude, rise = TRUE)) %&gt;% mutate(sunset = bioRad::suntime(date = date, lat = latitude, lon = longitude, rise = FALSE)) -&gt; radars_dates_sunriset Preview head(radars_dates_sunriset, 5) ## # A tibble: 5 x 6 ## # Groups: radar_id [5] ## radar_id date latitude longitude sunrise ## &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dttm&gt; ## 1 bejab 2016-09-19 51.19170 3.06420 2016-09-19 05:33:40 ## 2 czbrd 2016-09-19 49.65830 13.81780 2016-09-19 04:51:01 ## 3 czska 2016-09-19 49.50110 16.78850 2016-09-19 04:39:10 ## 4 deboo 2016-09-19 54.00440 10.04683 2016-09-19 05:04:58 ## 5 dedrs 2016-09-19 51.12464 13.76864 2016-09-19 04:50:51 ## # ... with 1 more variables: sunset &lt;dttm&gt; We then combine this sunrise/sunset information back with our vp data, to figure out if it is day or night and to which date they belong (date_of_sunset). For the latter, we consider night timestamps between midnight and sunrise as belonging to the previous date: vp_data %&gt;% # A date (not datetime) column to match with radars_sunriset mutate(date = as.Date(datetime)) %&gt;% # Combine vp data with radar_sunriset information right_join(radars_dates_sunriset, by = c(&quot;radar_id&quot; = &quot;radar_id&quot;, &quot;date&quot; = &quot;date&quot;)) %&gt;% # Define nights as starting before sunrise and after sunset mutate(day_night = if_else( datetime &lt; sunrise | datetime &gt; sunset, &quot;night&quot;, &quot;day&quot; )) %&gt;% # Calculate the date of sunrise: # For days: keep the date of the datetime # For nights: rewind the time with 12 hours, so that night timestamps between # midnight and sunrise are considered belonging to previous day. mutate(date_of_sunset = if_else( day_night == &quot;night&quot;, datetime - hours(12), datetime )) %&gt;% mutate(date_of_sunset = format(date_of_sunset, format = &quot;%Y%m%d&quot;)) %&gt;% # Remove unneeded columns select(-date, -latitude, -longitude, -sunrise, -sunset) -&gt; vp_data Preview: head(vp_data, 20) ## id radar_id datetime HGHT u v dens dd ## 1 1 bejab 2016-09-19 0 -2.9332356 -5.1274614 26.3651314 209.77231 ## 2 2 bejab 2016-09-19 200 -5.9695516 -6.7025647 19.9679146 221.68944 ## 3 3 bejab 2016-09-19 400 -5.8944726 -6.5680308 9.6763630 221.90636 ## 4 4 bejab 2016-09-19 600 -3.1691368 -5.8770409 5.9785151 208.33533 ## 5 5 bejab 2016-09-19 800 -2.3166976 -5.9704909 4.1655445 201.20747 ## 6 6 bejab 2016-09-19 1000 -1.0189155 -3.9789803 2.5513470 194.36334 ## 7 7 bejab 2016-09-19 1200 -0.2915183 -2.7959254 1.1012880 185.95245 ## 8 8 bejab 2016-09-19 1400 0.9222706 -2.8132153 1.1282989 161.84904 ## 9 9 bejab 2016-09-19 1600 1.4770844 -0.2543128 0.2693528 99.76896 ## 10 10 bejab 2016-09-19 1800 0.5449337 -0.8506422 2.0088153 147.35579 ## 11 11 bejab 2016-09-19 2000 -0.3131877 -0.2932509 0.3424582 226.88293 ## 12 12 bejab 2016-09-19 2200 0.9098089 0.3120916 0.2928373 71.06651 ## 13 13 bejab 2016-09-19 2400 NaN NaN 0.0000000 NaN ## 14 14 bejab 2016-09-19 2600 NaN NaN 0.0000000 NaN ## 15 15 bejab 2016-09-19 2800 NaN NaN 0.0000000 NaN ## 16 16 bejab 2016-09-19 3000 NaN NaN 0.0000000 NaN ## 17 17 bejab 2016-09-19 3200 NaN NaN 0.0000000 NaN ## 18 18 bejab 2016-09-19 3400 NaN NaN 0.0000000 NaN ## 19 19 bejab 2016-09-19 3600 NaN NaN 0.0000000 NaN ## 20 20 bejab 2016-09-19 3800 NaN NaN 0.0000000 NaN ## ff mtr day_night date_of_sunset ## 1 5.9071765 112.1353087 night 20160918 ## 2 8.9755182 129.0401145 night 20160918 ## 3 8.8251820 61.4848782 night 20160918 ## 4 6.6770530 28.7415809 night 20160918 ## 5 6.4042058 19.2074431 night 20160918 ## 6 4.1073680 7.5451112 night 20160918 ## 7 2.8110819 2.2289837 night 20160918 ## 8 2.9605343 2.4050647 night 20160918 ## 9 1.4988173 0.2906717 night 20160918 ## 10 1.0102202 1.4611289 night 20160918 ## 11 0.4290484 0.1057904 night 20160918 ## 12 0.9618490 0.2027990 night 20160918 ## 13 NaN NaN night 20160918 ## 14 NaN NaN night 20160918 ## 15 NaN NaN night 20160918 ## 16 NaN NaN night 20160918 ## 17 NaN NaN night 20160918 ## 18 NaN NaN night 20160918 ## 19 NaN NaN night 20160918 ## 20 NaN NaN night 20160918 2.7 Filter out heights For each radar we only want to select the data above 200m above ground level (AGL) (row selection). Since the heights in the data are expressed in above sea level (ASL), the height range to exclude is the altitude of the radar + 100m, which differs from radar to radar. Those height ranges are defined in our settings (see 1.3). To do this, we take the include_heights range for each radar2 and set the data outside that range to NA. for (radar in settings$radars) { # For each radar # Create height subset for that radar subset = vp_data %&gt;% filter( radar_id == radar$radar_id &amp; # Specific radar (HGHT &lt; radar$min_height | # Below min height HGHT &gt; radar$max_height) # Above max height ) %&gt;% # Set variables to NA mutate(u = NA, v = NA, dens = NA, dd = NA, ff = NA, mtr = NA) %&gt;% # Mention that the row was excluded because of height mutate(exclusion_reason = &quot;height&quot;) # Insert subset back into vp_data insert(vp_data, subset, by = &quot;id&quot;) -&gt; vp_data } Preview: head(vp_data, 20) ## id radar_id datetime HGHT u v dens dd ## 1 1 bejab 2016-09-19 0 NA NA NA NA ## 2 2 bejab 2016-09-19 200 -5.9695516 -6.7025647 19.9679146 221.68944 ## 3 3 bejab 2016-09-19 400 -5.8944726 -6.5680308 9.6763630 221.90636 ## 4 4 bejab 2016-09-19 600 -3.1691368 -5.8770409 5.9785151 208.33533 ## 5 5 bejab 2016-09-19 800 -2.3166976 -5.9704909 4.1655445 201.20747 ## 6 6 bejab 2016-09-19 1000 -1.0189155 -3.9789803 2.5513470 194.36334 ## 7 7 bejab 2016-09-19 1200 -0.2915183 -2.7959254 1.1012880 185.95245 ## 8 8 bejab 2016-09-19 1400 0.9222706 -2.8132153 1.1282989 161.84904 ## 9 9 bejab 2016-09-19 1600 1.4770844 -0.2543128 0.2693528 99.76896 ## 10 10 bejab 2016-09-19 1800 0.5449337 -0.8506422 2.0088153 147.35579 ## 11 11 bejab 2016-09-19 2000 -0.3131877 -0.2932509 0.3424582 226.88293 ## 12 12 bejab 2016-09-19 2200 0.9098089 0.3120916 0.2928373 71.06651 ## 13 13 bejab 2016-09-19 2400 NaN NaN 0.0000000 NaN ## 14 14 bejab 2016-09-19 2600 NaN NaN 0.0000000 NaN ## 15 15 bejab 2016-09-19 2800 NaN NaN 0.0000000 NaN ## 16 16 bejab 2016-09-19 3000 NaN NaN 0.0000000 NaN ## 17 17 bejab 2016-09-19 3200 NaN NaN 0.0000000 NaN ## 18 18 bejab 2016-09-19 3400 NaN NaN 0.0000000 NaN ## 19 19 bejab 2016-09-19 3600 NaN NaN 0.0000000 NaN ## 20 20 bejab 2016-09-19 3800 NaN NaN 0.0000000 NaN ## ff mtr day_night date_of_sunset exclusion_reason ## 1 NA NA night 20160918 height ## 2 8.9755182 129.0401145 night 20160918 &lt;NA&gt; ## 3 8.8251820 61.4848782 night 20160918 &lt;NA&gt; ## 4 6.6770530 28.7415809 night 20160918 &lt;NA&gt; ## 5 6.4042058 19.2074431 night 20160918 &lt;NA&gt; ## 6 4.1073680 7.5451112 night 20160918 &lt;NA&gt; ## 7 2.8110819 2.2289837 night 20160918 &lt;NA&gt; ## 8 2.9605343 2.4050647 night 20160918 &lt;NA&gt; ## 9 1.4988173 0.2906717 night 20160918 &lt;NA&gt; ## 10 1.0102202 1.4611289 night 20160918 &lt;NA&gt; ## 11 0.4290484 0.1057904 night 20160918 &lt;NA&gt; ## 12 0.9618490 0.2027990 night 20160918 &lt;NA&gt; ## 13 NaN NaN night 20160918 &lt;NA&gt; ## 14 NaN NaN night 20160918 &lt;NA&gt; ## 15 NaN NaN night 20160918 &lt;NA&gt; ## 16 NaN NaN night 20160918 &lt;NA&gt; ## 17 NaN NaN night 20160918 &lt;NA&gt; ## 18 NaN NaN night 20160918 &lt;NA&gt; ## 19 NaN NaN night 20160918 &lt;NA&gt; ## 20 NaN NaN night 20160918 &lt;NA&gt; 2.8 Filter out datetimes For some radars certain datetime ranges need to be excluded due to (remaining) rain clutter (row selection). Those datetime ranges were discovered during manual inspection and are defined in our settings (see 1.3)._ To do this, we take the exclude_datetimes range for each radar and set the data inside that range to NA. vp_data_temp &lt;- vp_data for (radar in settings$radars) { # For each radar for (i in seq_along(radar$exclude_datetime_from)) { # For each exclude_datetime # Create datetime subset for that radar subset = vp_data_temp %&gt;% filter( radar_id == radar$radar_id &amp; # Specific radar between( datetime, radar$exclude_datetime_from[[i]], # From this datetime radar$exclude_datetime_to[[i]] # Until this datetime ) ) %&gt;% # Set variables to NA mutate(u = NA, v = NA, dens = NA, dd = NA, ff = NA, mtr = NA) %&gt;% # Mention that the row was excluded because of datetime # This will overwrite any previous &quot;height&quot; reason mutate(exclusion_reason = &quot;datetime&quot;) # Insert subset back into vp_data insert(vp_data, subset, by = &quot;id&quot;) -&gt; vp_data } } Preview: head(vp_data, 20) ## id radar_id datetime HGHT u v dens dd ## 1 1 bejab 2016-09-19 0 NA NA NA NA ## 2 2 bejab 2016-09-19 200 -5.9695516 -6.7025647 19.9679146 221.68944 ## 3 3 bejab 2016-09-19 400 -5.8944726 -6.5680308 9.6763630 221.90636 ## 4 4 bejab 2016-09-19 600 -3.1691368 -5.8770409 5.9785151 208.33533 ## 5 5 bejab 2016-09-19 800 -2.3166976 -5.9704909 4.1655445 201.20747 ## 6 6 bejab 2016-09-19 1000 -1.0189155 -3.9789803 2.5513470 194.36334 ## 7 7 bejab 2016-09-19 1200 -0.2915183 -2.7959254 1.1012880 185.95245 ## 8 8 bejab 2016-09-19 1400 0.9222706 -2.8132153 1.1282989 161.84904 ## 9 9 bejab 2016-09-19 1600 1.4770844 -0.2543128 0.2693528 99.76896 ## 10 10 bejab 2016-09-19 1800 0.5449337 -0.8506422 2.0088153 147.35579 ## 11 11 bejab 2016-09-19 2000 -0.3131877 -0.2932509 0.3424582 226.88293 ## 12 12 bejab 2016-09-19 2200 0.9098089 0.3120916 0.2928373 71.06651 ## 13 13 bejab 2016-09-19 2400 NaN NaN 0.0000000 NaN ## 14 14 bejab 2016-09-19 2600 NaN NaN 0.0000000 NaN ## 15 15 bejab 2016-09-19 2800 NaN NaN 0.0000000 NaN ## 16 16 bejab 2016-09-19 3000 NaN NaN 0.0000000 NaN ## 17 17 bejab 2016-09-19 3200 NaN NaN 0.0000000 NaN ## 18 18 bejab 2016-09-19 3400 NaN NaN 0.0000000 NaN ## 19 19 bejab 2016-09-19 3600 NaN NaN 0.0000000 NaN ## 20 20 bejab 2016-09-19 3800 NaN NaN 0.0000000 NaN ## ff mtr day_night date_of_sunset exclusion_reason ## 1 NA NA night 20160918 height ## 2 8.9755182 129.0401145 night 20160918 &lt;NA&gt; ## 3 8.8251820 61.4848782 night 20160918 &lt;NA&gt; ## 4 6.6770530 28.7415809 night 20160918 &lt;NA&gt; ## 5 6.4042058 19.2074431 night 20160918 &lt;NA&gt; ## 6 4.1073680 7.5451112 night 20160918 &lt;NA&gt; ## 7 2.8110819 2.2289837 night 20160918 &lt;NA&gt; ## 8 2.9605343 2.4050647 night 20160918 &lt;NA&gt; ## 9 1.4988173 0.2906717 night 20160918 &lt;NA&gt; ## 10 1.0102202 1.4611289 night 20160918 &lt;NA&gt; ## 11 0.4290484 0.1057904 night 20160918 &lt;NA&gt; ## 12 0.9618490 0.2027990 night 20160918 &lt;NA&gt; ## 13 NaN NaN night 20160918 &lt;NA&gt; ## 14 NaN NaN night 20160918 &lt;NA&gt; ## 15 NaN NaN night 20160918 &lt;NA&gt; ## 16 NaN NaN night 20160918 &lt;NA&gt; ## 17 NaN NaN night 20160918 &lt;NA&gt; ## 18 NaN NaN night 20160918 &lt;NA&gt; ## 19 NaN NaN night 20160918 &lt;NA&gt; ## 20 NaN NaN night 20160918 &lt;NA&gt; 2.9 Export to a CSV file Finally, we export the data to a CSV file3: # Remove id column vp_data %&gt;% select(-id) -&gt; vp_data # Write data to file (filename is dynamically created by load_settings) write.csv(vp_data, file = paste0(processed_data_dir, settings$general$vp_output_file), na = &quot;&quot;, row.names = FALSE) For a radar the include_heights range can contain a min_height, max_height, both or none for a radar. If the value is something other than an integer, the general min_height or max_height is used instead.â†© The data frame vp_data contains NaN and NA values, which have a different meaning. That difference gets lost in the CSV file: all are treated as blank (= NA) values, which is fine for visualizations. If you want to keep that difference, you need work further with vp_data.â†© "],
["vp-to-flowviz.html", "3 Process vp data for the bird migration flow visualization 3.1 Load settings 3.2 Read data from CSV file 3.3 Add time bins 3.4 Add height bins 3.5 Filter out low density data 3.6 Aggregate data 3.7 Filter out empty rows 3.8 Rename and select columns 3.9 Export to a CSV file 3.10 Create metadata", " 3 Process vp data for the bird migration flow visualization In this chapter weâ€™ll process the vp data (CSV file) and metadata for the bird migration flow visualization. library(bioRad) library(dplyr) library(lubridate) library(circular) source(&quot;functions/load_settings.R&quot;) 3.1 Load settings Load the same settings we defined and used before (see 1.3): settings &lt;- load_settings(settings_file, radars_metadata_file) Found 64 radars from 9 countries in the settings. 3.2 Read data from CSV file To allow this chapter to run without having to process all the vp data, weâ€™ll load the data from the CSV file(s) rather than from the dataframe created in 2. Search in the defined processed data directory for csv files: processed_data_dir_no_slash &lt;- substr(processed_data_dir, 1, nchar(processed_data_dir)-1) csv_files &lt;- dir(processed_data_dir_no_slash, pattern = &quot;\\\\.csv&quot;, full.names = TRUE, recursive = FALSE) csv_files ## [1] &quot;../data/processed/flyway/vp_data_58_radars_20160919_20160924.csv&quot; ## [2] &quot;../data/processed/flyway/vp_data_58_radars_20160925_20160930.csv&quot; ## [3] &quot;../data/processed/flyway/vp_data_58_radars_20161001_20161009.csv&quot; ## [4] &quot;../data/processed/flyway/vp_data_64_radars_20160919_20160919.csv&quot; ## [5] &quot;../data/processed/flyway/vp_data_65_radars_20161001_20161001.csv&quot; Read and concatenate files: csv_data &lt;- lapply(csv_files, read.csv) flowviz_data &lt;- bind_rows(csv_data) Preview: head(flowviz_data) ## radar_id datetime HGHT u v dens dd ff mtr day_night ## 1 czbrd 2016-09-19 00:00:00 0 NA NA NA NA NA NA night ## 2 czbrd 2016-09-19 00:00:00 200 NA NA NA NA NA NA night ## 3 czbrd 2016-09-19 00:00:00 400 NA NA NA NA NA NA night ## 4 czbrd 2016-09-19 00:00:00 600 NA NA NA NA NA NA night ## 5 czbrd 2016-09-19 00:00:00 800 NA NA NA NA NA NA night ## 6 czbrd 2016-09-19 00:00:00 1000 NA NA NA NA NA NA night ## date_of_sunset exclusion_reason ## 1 20160918 height ## 2 20160918 height ## 3 20160918 height ## 4 20160918 height ## 5 20160918 height ## 6 20160918 height 3.3 Add time bins Add time bins per hour: flowviz_data %&gt;% mutate(datetime_bin = floor_date(as.POSIXct(datetime, tz = &quot;UTC&quot;), &quot;hour&quot;)) -&gt; flowviz_data 3.4 Add height bins Add two height bins: 200-2000 and above 2000: flowviz_data %&gt;% mutate(height_bin = case_when( .$HGHT &gt;= 200 &amp; .$HGHT &lt; 2000 ~ &quot;1&quot;, .$HGHT &gt;= 2000 ~ &quot;2&quot; )) -&gt; flowviz_data Preview: head(flowviz_data, 20) ## radar_id datetime HGHT u v dens dd ## 1 czbrd 2016-09-19 00:00:00 0 NA NA NA NA ## 2 czbrd 2016-09-19 00:00:00 200 NA NA NA NA ## 3 czbrd 2016-09-19 00:00:00 400 NA NA NA NA ## 4 czbrd 2016-09-19 00:00:00 600 NA NA NA NA ## 5 czbrd 2016-09-19 00:00:00 800 NA NA NA NA ## 6 czbrd 2016-09-19 00:00:00 1000 NA NA NA NA ## 7 czbrd 2016-09-19 00:00:00 1200 -4.351987 -1.306744 0 253.2869 ## 8 czbrd 2016-09-19 00:00:00 1400 -3.953859 -1.190245 0 253.2464 ## 9 czbrd 2016-09-19 00:00:00 1600 -3.742980 -1.019125 0 254.7689 ## 10 czbrd 2016-09-19 00:00:00 1800 -3.612789 -1.175117 0 251.9821 ## 11 czbrd 2016-09-19 00:00:00 2000 -3.406420 -1.243227 0 249.9496 ## 12 czbrd 2016-09-19 00:00:00 2200 NA NA 0 NA ## 13 czbrd 2016-09-19 00:00:00 2400 NA NA 0 NA ## 14 czbrd 2016-09-19 00:00:00 2600 NA NA 0 NA ## 15 czbrd 2016-09-19 00:00:00 2800 NA NA 0 NA ## 16 czbrd 2016-09-19 00:00:00 3000 NA NA 0 NA ## 17 czbrd 2016-09-19 00:00:00 3200 NA NA 0 NA ## 18 czbrd 2016-09-19 00:00:00 3400 NA NA 0 NA ## 19 czbrd 2016-09-19 00:00:00 3600 NA NA 0 NA ## 20 czbrd 2016-09-19 00:00:00 3800 NA NA 0 NA ## ff mtr day_night date_of_sunset exclusion_reason datetime_bin ## 1 NA NA night 20160918 height 2016-09-19 ## 2 NA NA night 20160918 height 2016-09-19 ## 3 NA NA night 20160918 height 2016-09-19 ## 4 NA NA night 20160918 height 2016-09-19 ## 5 NA NA night 20160918 height 2016-09-19 ## 6 NA NA night 20160918 height 2016-09-19 ## 7 4.543938 0 night 20160918 2016-09-19 ## 8 4.129127 0 night 20160918 2016-09-19 ## 9 3.879241 0 night 20160918 2016-09-19 ## 10 3.799098 0 night 20160918 2016-09-19 ## 11 3.626197 0 night 20160918 2016-09-19 ## 12 NA NA night 20160918 2016-09-19 ## 13 NA NA night 20160918 2016-09-19 ## 14 NA NA night 20160918 2016-09-19 ## 15 NA NA night 20160918 2016-09-19 ## 16 NA NA night 20160918 2016-09-19 ## 17 NA NA night 20160918 2016-09-19 ## 18 NA NA night 20160918 2016-09-19 ## 19 NA NA night 20160918 2016-09-19 ## 20 NA NA night 20160918 2016-09-19 ## height_bin ## 1 &lt;NA&gt; ## 2 1 ## 3 1 ## 4 1 ## 5 1 ## 6 1 ## 7 1 ## 8 1 ## 9 1 ## 10 1 ## 11 2 ## 12 2 ## 13 2 ## 14 2 ## 15 2 ## 16 2 ## 17 2 ## 18 2 ## 19 2 ## 20 2 3.5 Filter out low density data Only keep data with a density above or equal to 5 (birds) and not marked to be excluded in 2: flowviz_data %&gt;% filter(dens &gt;= 5) %&gt;% filter(exclusion_reason == &quot;&quot;) -&gt; flowviz_data 3.6 Aggregate data Aggregate the data by datetime and height bin, taking the mean for every value. For the direction dd we need to calculate the circular mean, with a little helper function: circular_mean_degrees &lt;- function(directions) { # If all directions are NA, mean.circular will throw an error, so we test it beforehand: if (all(is.na(directions))) { circular_mean = NA } else { circular_mean &lt;- mean.circular(circular(directions, units = &quot;degrees&quot;), na.rm = TRUE)[[1]] # Convert negative to positive degrees (e.g. -45 = 315): circular_mean &lt;- if (circular_mean &lt; 0) 360 + circular_mean else circular_mean } return(circular_mean) } Aggregate data: flowviz_data %&gt;% group_by(radar_id, datetime_bin, height_bin) %&gt;% summarize( avg_u = mean(u, na.rm = TRUE), avg_v = mean(v, na.rm = TRUE), avg_dens = mean(dens, na.rm = TRUE), avg_dd = circular_mean_degrees(dd), avg_ff = mean(ff, na.rm = TRUE) ) %&gt;% ungroup() -&gt; flowviz_data Preview: head(data.frame(flowviz_data)) ## radar_id datetime_bin height_bin avg_u avg_v avg_dens ## 1 bejab 2016-09-19 00:00:00 1 -4.724057 -6.276233 11.300968 ## 2 bejab 2016-09-19 01:00:00 1 -3.432383 -5.833267 10.496489 ## 3 bejab 2016-09-19 02:00:00 1 -2.602208 -5.786797 10.786040 ## 4 bejab 2016-09-19 03:00:00 1 -2.932833 -4.987901 9.556616 ## 5 bejab 2016-09-19 04:00:00 1 -2.067265 -3.580836 7.286111 ## 6 bejab 2016-09-19 05:00:00 1 -1.551661 -1.619145 8.005603 ## avg_dd avg_ff ## 1 216.1673 7.894408 ## 2 209.7428 6.800435 ## 3 204.0742 6.354746 ## 4 210.5882 5.795676 ## 5 209.2596 4.148599 ## 6 225.2535 2.311368 3.7 Filter out empty rows Only keep data where at least one of the calculated values is not NA: flowviz_data %&gt;% filter( !is.na(avg_u) | !is.na(avg_v) | !is.na(avg_dens) | !is.na(avg_dd) | !is.na(avg_ff) ) -&gt; flowviz_data Preview: head(data.frame(flowviz_data)) ## radar_id datetime_bin height_bin avg_u avg_v avg_dens ## 1 bejab 2016-09-19 00:00:00 1 -4.724057 -6.276233 11.300968 ## 2 bejab 2016-09-19 01:00:00 1 -3.432383 -5.833267 10.496489 ## 3 bejab 2016-09-19 02:00:00 1 -2.602208 -5.786797 10.786040 ## 4 bejab 2016-09-19 03:00:00 1 -2.932833 -4.987901 9.556616 ## 5 bejab 2016-09-19 04:00:00 1 -2.067265 -3.580836 7.286111 ## 6 bejab 2016-09-19 05:00:00 1 -1.551661 -1.619145 8.005603 ## avg_dd avg_ff ## 1 216.1673 7.894408 ## 2 209.7428 6.800435 ## 3 204.0742 6.354746 ## 4 210.5882 5.795676 ## 5 209.2596 4.148599 ## 6 225.2535 2.311368 3.8 Rename and select columns Rename and select the columns required by the flowviz: flowviz_data %&gt;% rename( interval_start_time = datetime_bin, altitude_band = height_bin, avg_u_speed = avg_u, avg_v_speed = avg_v ) %&gt;% # Add +00 for interval_start_time: mutate(interval_start_time = paste0(interval_start_time, &quot;+00&quot;)) %&gt;% # Select columns select(radar_id, interval_start_time, altitude_band, avg_u_speed, avg_v_speed, avg_dens) -&gt; flowviz_data Preview: head(flowviz_data) ## # A tibble: 6 x 6 ## radar_id interval_start_time altitude_band avg_u_speed avg_v_speed ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 bejab 2016-09-19 00:00:00+00 1 -4.724057 -6.276233 ## 2 bejab 2016-09-19 01:00:00+00 1 -3.432383 -5.833267 ## 3 bejab 2016-09-19 02:00:00+00 1 -2.602208 -5.786797 ## 4 bejab 2016-09-19 03:00:00+00 1 -2.932833 -4.987901 ## 5 bejab 2016-09-19 04:00:00+00 1 -2.067265 -3.580836 ## 6 bejab 2016-09-19 05:00:00+00 1 -1.551661 -1.619145 ## # ... with 1 more variables: avg_dens &lt;dbl&gt; 3.9 Export to a CSV file Export the data to a flowviz data file: write.csv(flowviz_data, file = paste0(flowviz_data_dir, &quot;birds.csv&quot;), na = &quot;&quot;, row.names = FALSE) 3.10 Create metadata Not yet implemented, currently created manually (see example). "]
]
